/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package TCP;
import thr.connection.bd.ConnectionDb;
import static TCP.ServeurTCP1.inverse;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.net.Socket;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;

/**
 *
 * @author Thierry
 */
public class FrameServeur extends javax.swing.JFrame {
  ConnectionDb cn=new ConnectionDb();
            Statement stat;
             ResultSet rs;
    /**
     * Creates new form FrameServeur
     */
    public FrameServeur() {
        initComponents();
         Thread td2 = new Thread(){
        public void run(){
            try {
                while(true){
                Thread.sleep(15);
                
               fServeur();
                }
                }
            catch (Exception e) {
            }
        }
          };
         td2.start();
         
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrameServeur.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrameServeur.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrameServeur.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrameServeur.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrameServeur().setVisible(true);
            }
        });
    }
    public void fServeur(){
        String phraseClient,phraseMajuscule;
        try {
            //creer un socket decoute
            ServerSocket socketEcoute =new ServerSocket(Integer.parseInt("123"));
            
            while(true){
                //attendre connexion client
                Socket socketConnexion=socketEcoute.accept();
                //creer flux d entrer attache a la socket
                BufferedReader entreeDepuisClient=new BufferedReader(new InputStreamReader(socketConnexion.getInputStream()));
                
                //creer flux de sortie attache a la socket
                
                DataOutputStream sortieVersClient = new DataOutputStream(socketConnexion.getOutputStream());
                //lire la chaine depuis la socket
                
                phraseClient=entreeDepuisClient.readLine();
                //
                if(("Mety ve").equals(phraseClient))
                          {
                              sortieVersClient.writeBytes("mety");
               
                        
                            String requete="INSERT INTO inscription_client (numero_phone,parcour,niveau,nom_complet) values('"+2+"','"+3+"','"+4+"','"+5+"')";
                            try{
                               stat=cn.obtenirConnexion().createStatement();
                               stat.executeUpdate(requete);
                                sortieVersClient.writeBytes("enregistrement reusie");
                            
                         
                          

                        } catch (SQLException e) {

                            JOptionPane.showMessageDialog(this, "une erreur s'est produit");
                            System.out.println(e);

                        }
                          }
                else{
                    sortieVersClient.writeBytes("Erreur e");
                }
                phraseMajuscule=test()+'\n';
                //String Alef=phraseClient;
               
                System.out.println("Connection from :"+socketConnexion.getInetAddress()+"Message Client:"+phraseClient);
                
                //ecrire au client
                sortieVersClient.writeByte(1);
                sortieVersClient.writeBytes("fdf");
                sortieVersClient.flush();
                //second mess
                 sortieVersClient.writeByte(2);
                sortieVersClient.writeBytes(phraseMajuscule);
                sortieVersClient.flush();
                
               // sortieVersClient.writeBytes(Alef);
                
            }//fin boucle attendre une  nouvelle connexion
        } 
        catch (Exception e) {
            System.out.println(e);
        }
    }
    public static String test(){
        return "test oe aona";
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
